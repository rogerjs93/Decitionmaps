{"version":3,"file":"createText-2e5e7dd3-B7Yg42jR.js","sources":["../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/parse.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/mermaid/dist/createText-2e5e7dd3.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","import { l as log, M as decodeEntities } from \"./mermaid-b5860b54.js\";\nimport { fromMarkdown } from \"mdast-util-from-markdown\";\nimport { dedent } from \"ts-dedent\";\nfunction preprocessMarkdown(markdown) {\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n  const withoutExtraSpaces = dedent(withoutMultipleNewlines);\n  return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const { children } = fromMarkdown(preprocessedMarkdown);\n  const lines = [[]];\n  let currentLine = 0;\n  function processNode(node, parentType = \"normal\") {\n    if (node.type === \"text\") {\n      const textLines = node.value.split(\"\\n\");\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n        textLine.split(\" \").forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType });\n          }\n        });\n      });\n    } else if (node.type === \"strong\" || node.type === \"emphasis\") {\n      node.children.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n  children.forEach((treeNode) => {\n    if (treeNode.type === \"paragraph\") {\n      treeNode.children.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n  return lines;\n}\nfunction markdownToHTML(markdown) {\n  const { children } = fromMarkdown(markdown);\n  function output(node) {\n    if (node.type === \"text\") {\n      return node.value.replace(/\\n/g, \"<br/>\");\n    } else if (node.type === \"strong\") {\n      return `<strong>${node.children.map(output).join(\"\")}</strong>`;\n    } else if (node.type === \"emphasis\") {\n      return `<em>${node.children.map(output).join(\"\")}</em>`;\n    } else if (node.type === \"paragraph\") {\n      return `<p>${node.children.map(output).join(\"\")}</p>`;\n    }\n    return `Unsupported markdown: ${node.type}`;\n  }\n  return children.map(output).join(\"\");\n}\nfunction splitTextToChars(text) {\n  if (Intl.Segmenter) {\n    return [...new Intl.Segmenter().segment(text)].map((s) => s.segment);\n  }\n  return [...text];\n}\nfunction splitWordToFitWidth(checkFit, word) {\n  const characters = splitTextToChars(word.content);\n  return splitWordToFitWidthRecursion(checkFit, [], characters, word.type);\n}\nfunction splitWordToFitWidthRecursion(checkFit, usedChars, remainingChars, type) {\n  if (remainingChars.length === 0) {\n    return [\n      { content: usedChars.join(\"\"), type },\n      { content: \"\", type }\n    ];\n  }\n  const [nextChar, ...rest] = remainingChars;\n  const newWord = [...usedChars, nextChar];\n  if (checkFit([{ content: newWord.join(\"\"), type }])) {\n    return splitWordToFitWidthRecursion(checkFit, newWord, rest, type);\n  }\n  if (usedChars.length === 0 && nextChar) {\n    usedChars.push(nextChar);\n    remainingChars.shift();\n  }\n  return [\n    { content: usedChars.join(\"\"), type },\n    { content: remainingChars.join(\"\"), type }\n  ];\n}\nfunction splitLineToFitWidth(line, checkFit) {\n  if (line.some(({ content }) => content.includes(\"\\n\"))) {\n    throw new Error(\"splitLineToFitWidth does not support newlines in the line\");\n  }\n  return splitLineToFitWidthRecursion(line, checkFit);\n}\nfunction splitLineToFitWidthRecursion(words, checkFit, lines = [], newLine = []) {\n  if (words.length === 0) {\n    if (newLine.length > 0) {\n      lines.push(newLine);\n    }\n    return lines.length > 0 ? lines : [];\n  }\n  let joiner = \"\";\n  if (words[0].content === \" \") {\n    joiner = \" \";\n    words.shift();\n  }\n  const nextWord = words.shift() ?? { content: \" \", type: \"normal\" };\n  const lineWithNextWord = [...newLine];\n  if (joiner !== \"\") {\n    lineWithNextWord.push({ content: joiner, type: \"normal\" });\n  }\n  lineWithNextWord.push(nextWord);\n  if (checkFit(lineWithNextWord)) {\n    return splitLineToFitWidthRecursion(words, checkFit, lines, lineWithNextWord);\n  }\n  if (newLine.length > 0) {\n    lines.push(newLine);\n    words.unshift(nextWord);\n  } else if (nextWord.content) {\n    const [line, rest] = splitWordToFitWidth(checkFit, nextWord);\n    lines.push([line]);\n    if (rest.content) {\n      words.unshift(rest);\n    }\n  }\n  return splitLineToFitWidthRecursion(words, checkFit, lines);\n}\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\nfunction addHtmlSpan(element, node, width, classes, addBackground = false) {\n  const fo = element.append(\"foreignObject\");\n  const div = fo.append(\"xhtml:div\");\n  const label = node.label;\n  const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  div.html(\n    `\n    <span class=\"${labelClass} ${classes}\" ` + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\"\n  );\n  applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"table-cell\");\n  div.style(\"white-space\", \"nowrap\");\n  div.style(\"max-width\", width + \"px\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  if (addBackground) {\n    div.attr(\"class\", \"labelBkg\");\n  }\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style(\"display\", \"table\");\n    div.style(\"white-space\", \"break-spaces\");\n    div.style(\"width\", width + \"px\");\n    bbox = div.node().getBoundingClientRect();\n  }\n  fo.style(\"width\", bbox.width);\n  fo.style(\"height\", bbox.height);\n  return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, line) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, line);\n  const textLength = testSpan.node().getComputedTextLength();\n  testElement.remove();\n  return textLength;\n}\nfunction computeDimensionOfText(parentNode, lineHeight, text) {\n  var _a;\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, [{ content: text, type: \"normal\" }]);\n  const textDimension = (_a = testSpan.node()) == null ? void 0 : _a.getBoundingClientRect();\n  if (textDimension) {\n    testElement.remove();\n  }\n  return textDimension;\n}\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append(\"g\");\n  const bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n  const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n  let lineIndex = 0;\n  for (const line of structuredText) {\n    const checkWidth = (line2) => computeWidthOfText(labelGroup, lineHeight, line2) <= width;\n    const linesUnderWidth = checkWidth(line) ? [line] : splitLineToFitWidth(line, checkWidth);\n    for (const preparedLine of linesUnderWidth) {\n      const tspan = createTspan(textElement, lineIndex, lineHeight);\n      updateTextContentAndStyles(tspan, preparedLine);\n      lineIndex++;\n    }\n  }\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text(\"\");\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"emphasis\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(\" \" + word.content);\n    }\n  });\n}\nconst createText = (el, text = \"\", {\n  style = \"\",\n  isTitle = false,\n  classes = \"\",\n  useHtmlLabels = true,\n  isNode = true,\n  width = 200,\n  addSvgBackground = false\n} = {}) => {\n  log.info(\"createText\", text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    const htmlText = markdownToHTML(text);\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        // cspell: disable-line\n        (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n      ),\n      labelStyle: style.replace(\"fill:\", \"color:\")\n    };\n    const vertexNode = addHtmlSpan(el, node, width, classes, addSvgBackground);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\nexport {\n  createText as a,\n  computeDimensionOfText as c\n};\n"],"names":["emptyOptions","one","value","includeImageAlt","includeHtml","Boolean","node","type","alt","all","children","Array","isArray","values","result","index","length","join","splice","list","start","remove","items","end","parameters","chunkStart","from","unshift","slice","push","hasOwnProperty","syntaxExtension","extension","hook","left","call","right","code","constructs","existing","before","add","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","String","fromCharCode","factorySpace","effects","ok","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","content","tokenize","contentStart","attempt","this","parser","contentInitial","lineStart","previous","token","contentType","next","data","document","self","stack","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","point","indexBeforeFlow","exitContainers","Object","assign","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","entry","nok","disable","null","includes","classifyCharacter","resolveAll","context","called","resolve","attention","name","attentionMarkers","marker","inside","after","open","close","_open","_close","group","text","openingSequence","closingSequence","use","nextEvents","sliceSerialize","charCodeAt","movePoint","insideSpan","column","_bufferIndex","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","blankLine","partial","blockQuote","state","_container","contBefore","characterEscape","element","createElement","decodeNamedCharacterReference","characterReference","innerHTML","character","textContent","numeric","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","tail","sequenceOpen","beforeSequenceOpen","infoBefore","atNonLazyBreak","info","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","codeIndented","afterPrefix","atBreak","furtherStart","codeText","between","tailExitIndex","headEnterIndex","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","replace","toLowerCase","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","headingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","resolveTo","htmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","media","label","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","labelStartLink","lineEnding","thematicBreak","sequence","initialSize","kind","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","setextUnderline","paragraph","heading","initial","flowInitial","afterConstruct","resolver","createResolver","string","initializeFactory","field","notText","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveText","parse","options","extensions","defaultConstructs","search","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","stringifyPosition","position","pos","own","fromMarkdown","encoding","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","key","and","errorHandler","onExitError","Error","toString","lang","title","url","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","markdownToLines","markdown","preprocessedMarkdown","withoutMultipleNewlines","dedent","preprocessMarkdown","lines","currentLine","processNode","parentType","split","forEach","textLine","word","contentNode","treeNode","splitWordToFitWidth","checkFit","splitWordToFitWidthRecursion","Intl","Segmenter","segment","s","usedChars","remainingChars","nextChar","rest","newWord","splitLineToFitWidth","some","splitLineToFitWidthRecursion","words","newLine","joiner","nextWord","lineWithNextWord","createTspan","textElement","lineHeight","append","attr","computeWidthOfText","parentNode","testElement","testSpan","updateTextContentAndStyles","textLength","getComputedTextLength","computeDimensionOfText","_a","textDimension","getBoundingClientRect","tspan","wrappedLine","innerTspan","createText","el","style","isTitle","classes","useHtmlLabels","isNode","width","addSvgBackground","log$1","output","markdownToHTML","vertexNode","addBackground","fo","div","labelClass","dom","styleFn","labelStyle","bbox","height","addHtmlSpan","decodeEntities","svgLabel","g","structuredText","labelGroup","bkg","insert","checkWidth","line2","linesUnderWidth","preparedLine","getBBox","padding","createFormattedText"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]}